# fire up a jupyter notebbok
cd <desired directory>
jupyter notebook

# have jupyter linked to different versions of python
install Jupyter again using pip3 install jupyter
install Python3 kernel using jupyter kernelspec install-self

# have jupyter open in a browser you want
jupyter notebook --generate-config
vi ~/.jupyter/jupyter_notebook_config.py
#and change
c.NotebookApp.browser = ''
#to for example:
c.NotebookApp.browser = '/usr/bin/google-chrome'

Shift-Enter: Executes cell and moves into next, creating a new one if there isn't one
Alt-Enter: Executes cell and creates a new one below it, inserting one if there is already one
Ctl-Enter: Just executes cell
Shift-tab: after the name of a function will show doctring for that function

For Markdown, choose 'Markdown' from drop-down options
------------------------------------
Virtual Environments:
virtualenv:
Create a virtual env with system packages
$ virtualenv --system-site-packages targetDirectory
Create a plain virtual env without system packages
$ virtualenv targetDirectory
# specify a desired version of python
$ virtualenv targetDirectory python=python3.5

Activate
$ source targetDirectory/bin/activate
Then pip install modules needed. This creates a self-contained installation that can be used to create an app
To deactivate
(targetDirectory)$ deactivate

You can also install modules in your venv by:
$ targetDirectory/bin/pip install <packagename>

conda:
# create a new env
$ conda create --name <name of env>
# optionally create env with version of python specified and a list of needed libraries
$ conda create --name <name of env> python=python3.5 <list of libraries needed separated by space>
eg. $ conda create --name mybioinfo python=python3.5 biopython pandas numpy
$ conda info --envs # shows all your conda enviroments
# list all conda envs
conda env list
# activate conda env
$ source activate <name of env>
# deactivate/exit conda env
$ source deactivate
------------------------------------
# Print formatting
name = 'San'
age = 38
print('{} is {} years old'.format(name,age))
print('{x} is {y} years old'.format(x=name,y=age)) # dont have to worry about order
------------------------------------
Sequences are data structures that can be iterated over eg. lists, tuples, dictionaries
list = [1,2,3,4] # mutable
list[0] # how to access
tuple = (1,'a',2,'b') #immutable
tuple[1]
dict = {'key1':'value1', 'key2':'value2'}
dict['key'] # access for all three through []
# dict values can be lists etc.
# dicts do not have any order, just based on keys

len(list) # gives length of list

# Strings are immutable lists, like tuples, individual elements can be accessed the same way
# When slicing, access is upto, but not including the to index defined
name = 'Sanjeev'
name[0:] # will fetch the entire string
name[1:4] # 'anj', 'e' the 4th index is not included
name[2:] # 'njeev'
name[:5] # 'Sanje' the second 'e', which is the 5th index is not included

# append
list.append[5] # makes list [1,2,3,4,5]
# list can contain nested lists

# 'set' creates a list of unique elements from a list
set{1,1,1,2,2,2,3,3} # creates 1,2,3

x = list(range(0,100)) # creates a list of numbers from 0-99, same as range(100)

# print a list
print(*list, sep='\n') # print a list separated by new lines. The '*' will pass the elements of the list as individual elements
------------------------------------
List comprehension
Iterating through the elements of a sequence and doing some operation all in one statement without having to loop through
[<some operation on x> for x in <some sequence>] # returns a list, so need to be enclosed in []
[i^2 for i in range(10)] # returns the squares of numbers 1-10
# in other words, one line for loop
# eg. if you want a list of the squares of the first 5 numbers
[x**2 for x in range(1,6)]
------------------------------------
Functions
# functions - created with def
def square(number):
	return number**2

Positional and keyword arguments
def function(x, y, z=2.0):
# x and y are positional arguments, z is a keyword argument. Positional arguments have to be declared in order first followed by keyword arguments that need not be in any order (just that they need to be declared after positional ones)

Scope - variables in functions can have local or global scope. The scope of a variable is called its namespace. After a function is done executing variables in the local namespace are destroyed (exception being closures). For a variable to be global, it needs to be declared with the global keyword.

Functions can be declared within other functions - inner and outer functions. Inner destroyed once outer is done executing. Inner cannot bind variables but can access local vars in outer's scope.

Functions in python can return multiple values. In such cases, the return value can be captured in a single tuple or multiple scalars. Can also be captured in a dict if the function returns as a dict.

Functions are objects - this means they can be passed around as variables, making them much more useful and flexible. For eg. if you want to do a set of string cleaning operations on a set of strings, you can create funcions for each operation (or use built-in functions), put those functions into a list and then call them successively on a set of strings. This is a more 'functional' pattern than having the strings go through each function separately. Being objects also enables functions to be used as arguments to other functions - for eg. the built in 'map' function can apply another function to a collection (lists, dicts) of some kind.

#Map() lets you execute a function on a set of iterable data
x=[1,2,3,4,5]
map(square,x) # will apply the function square to every element of x and return a map object that can be printed out with a for loop
for sq in map(square,x):
	print(sq)

list(map(square,x)) # returns a list 
[sq for sq in map(square,x)] # same as above

# map can also run functions that compare multiple lists
store1 = [10.00, 11.00, 12.34, 2.34]
store2 = [9.00, 11.10, 12.34, 2.01]
map(min, store1, store2) # runs the min function comparing 2 lists and returns the min value at each position

for item in (map(min, store1, store2)):
    print(item)

'Functional programming' is where all parameters to a function are defined thus showing what can change and what can't. Often the parameters themselves can be functions.

#Filter 
filter is similar to map, but instead of applying a function to all elements of a list, it selects certain elements of a list that meet a criteria
filter(lambda num: num%2 == 0, x) # returns just the even numbers from list x, using map instead of filter here would yield a list of boolean values based on if a given list element is even or not

#Lambda - python's way of creating anonymous functions
#Usually evaluates only a single expression, so not suited for complex logic, but can effectively do simple data cleaning.
General form:
lambda <arg or list of args> : <do something with the args result of which is returned>

lambda a, b, c : (a + b) * c # takes 3 args and multiplies the sum of the first two with the third. 
# a lambda function expression can be stored in a variable and called as follows:
myfunc = lambda a, b, c : (a + b)*c
myfunc(1,2,3) # will return 9

# lambda can be combined with map to avoid having to define functions to use with map
x=[1,2,3,4,5]
map(lambda num: num**2, x) # same as map(square,x), except you don't have to define and store square

Its often less typing and clearer to pass a lambda function as opposed to writing a full-out function or even passing a variable containing the lambda function.

#Closures
A closure is a dynamically generated function returned by another function. A key property is that closures continue to have access to the variables in the local namespace where it was created even after the function is done executing. 

def parent_func(x):
  def closure_func():
    print('This is the local variable: %d' % x)
  return closure_func

closure = parent_func(5)
closure()
# whenever you execute closure you will always get 5 - because it has access to the 5 that was passed to the parent function the first time.
Variables within closures can be static like above or dynamic (lists, dict etc) which can then be used to keep track of arguments from previous executions of the closure. 
You cannot, however, bind variables in the enclosing function's scope within a closure function		
------------------------------------
# key functions
s = 'My name is SP#her name is MP'
s.lower() # lower cases the string s. s.upper() does the opposite
s.split() # splits s on white space by default
s.split('#') # custom split, splits on #

dict.keys() # returns keys of dictionary
dict.values()

list.pop() # pop and returns the last item in the list, shortening the list by one
list.append('element') # appends an element to the list

x in list # checks if x is in the list, returns a boolean
list.count('word') # counts the number of times a word occurs in the list
string.startswith('letter') # checks if string starts with letter

list.sort() # default sorting is alphabetical
list.sort(key = lambda x: <do something with x>) # 'key' argument allows you to pass different sorting criteria 
------------------------------------
#Tuple unpacking - basically accessing single elements of tuples
list = [(1,2),(3,4),(5,6)]
for (a,b) in list:
	print(a)
	print(b)
------------------------------------
iterating through multiple lists
for i,j in zip(list1, list2)
------------------------------------
# Documentation strings (docstring) - especially for functions, to describe what the code does. Enclosed in triple enclosing quotes
"""
This function calculates the mean squared value of a set of numbers
"""
------------------------------------

Date/time modules

import datetime as dt
import time as tm
tm.time() # number of seconds since Jan 1, 1970 (epoch)
dtnow = dt.datetime.fromtimestamp(tm.time()) # converts time into year, month, day etc
#dtnow.year, dtnow.month, dtnow.day, dtnow.hour, dtnow.minute, dtnow.second etc.
dt.date.today() # shows today
dt.timedelta(days = 100) # create a timedelta of 100 days
dt.date.today() - dt.timedelta(days = 100) # the date 100 days befor today

%%timeit n=100 # will time an operation for 100 loops, can be used to check the time of execution of loop vs no-loop
-----------------------------
Regular expressions
# Done using the re library
import re
search() - returns the first of the matches
re.search(<pattern>, <input string>) # pattern here is any general regular expression pattern. For eg.
re.search('^From:', line) # will match if the line starts with 'From:' (as is the case with email headers)
re.search('From:.+@', line) # .+ means 1 or more characters 
re.search('From:.*@', line) # .* means zero or more characters

To extract the matches, have the portion to be extracted enclosed in parantheses. For eg. say a string 'extime_100modulename' and you want to extract 'modulename'
re.search('.*_\d+(.*)', string) # will fetch the match into a match object
match.group(1) # will give 'modulename'

findall() - returns all matches
re.findall('\S+@\S+', line) # will return a list of all email addresses in line
re.findall('[a-zA-Z0-9]\S+@\S+[a-zA-Z]', line) # more specific version of above making sure the non-whitespace characters are alphanumeric
findall will return all matches as a list

split
re.split('@', string) # splits the string into two at @

sub
re.sub('subsitute this', 'with this, 'in this string') # finds one string and substitutes with another, in a given string/line
-----------------------------
File operations
# use 'open' to create a file handle
f = open('file.txt', 'r') # default mode is read, so can leave out 'r' 
# then loop through the lines
for line in f:
  <do something>
# strip out EOL (end of line) markers and gather contents in a list
lines = [line.rstrip() for line in f]
# to write into a file
f = open('file.txt', 'w') # creates a new file overwriting one if it already existed
# to copy a file into a new file
with open('newfile.txt', 'w') as handle:
  handle.writelines(line for line in open('oldfile.txt') if len(line) >1
# close file handle
f.close()
# file methods include read(), readlines(), write(string), writelines(strings)
-----------------------------
Basic OOP
#Class definition
class Person (object): # 'object' passed as the parameter means there is no inheritance, it is its own class
    department = 'School of Information' #a class variable

    def __init__(self, name, location): # constructor that initializes a Person object
	self.name = name
	self.location = location
    def set_name(self, new_name): #a method
        self.name = new_name
    def set_location(self, new_location):
        self.location = new_location
        
#Object instantiation and use:
person = Person('Sanjeev', 'Bedford')
person.set_name('Sanjeev Pillai')
person.set_location('Bedford, MA')
print('{} live in {} and works in the department {}'.format(person.name, person.location, person.department))

'self' refers to the object itself. For eg. person.setname('name') is the same as Person.setname(person, 'name'). Here the instance person is passed to the class's setname method. Means the method acts on the object (self) that is passed to it.

Instance methods need a 'self' because they require an existing instance of a class to be used. 

Class attributes are general to all objects created from a class. For eg.

class Car(object):
	num_wheels = 4

	def __init__(...)

Here all car objects created will have num_wheels set to 4 and can be accessed through self, ie. self.num_wheels

Static methods do not need a 'self', they are declared at class level. A 'decorator' @staticmethod is used to make it clear that it should not receive a self as first parameter

@staticmethod
def make_car_sound():
	print('Vrooom!')

All cars can make the same sound.

Class methods are variants of static methods. Instead of no parameter or self/object parameter, this method receives a 'cls' parameter, meaning the class itself. Decoarated with @classmethod.

Inheritance
Child classes inheriting from a parent class will help define a lot of the abstractions in the parent class itself with the child classes containing only what is different from the parent (or in addition to the parent). For eg. a Car parent class can have child classes like 'compact', 'midsize' and 'fullsize' cars.

Often a concept (not a real world object) is a parent class. For eg. 'Vehicle' is a concept class for real world object like cars, trucks etc.

When a child class inherits from a parent class, its definition will have the parent class as the parameter (instead of 'object' which means no inheritance).

class Car(Vehicle):

Abstract classes: The parent concept class should not be instantiated since it is not a real world object. It should instead be an 'Abstract Base Class' (ABC) - classes that can only be inherited from. This can be achieved by setting that class's metaclass to ABCMeta and making one of its methods virtual (meaning it is an abstractmethod that doesn't do anything in the ABC, but the child classes can override it with a method that does something. Abstraction is key to inheritance.

class Vehicle(object):
	__metaclass__= ABCMeta
	
	sale_price=0
	num_wheels=0
	<a set of methods including __init__>

	@abstractmethod
	def vehicle_type():
		pass

And then

class Motorcycle(Vehicle):
	sale_price=4000
	num_wheels=2

	def vehicle_type():
		return 'motorcycle'
------------------------------------

