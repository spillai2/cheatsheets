Numpy - linear algebra library for numeric computation.
Numpy arrays come in both one dimensional vectors and 2-dimensional matrices

Create a numpy array, also called ndarray for n-dimensional array

npa = np.array([[1,2,3],[3,4,5],[6,7,8]]) # creates a 3x3 matrix where each list is a row
npa.shape() # returns dimensions 
npa.reshape(x,y) # if npa is a one dimensional array, reshape turns it into a, x,y matrix
npa.resize(x,y) # changes dimensions of an existing matrix
np.ones((x,y)), np.zeros((x,y)), np.eye(4) # creates a matrix of ones, zeros, identity
np.linspace(0,4,9) # take 9 equidistant values between 0 and 4

x*y # element-wise multiplication of 2 matrices of same dimensions
x.dot(y) # matrix multiplication
x.T # transpose
min(), max(), mean(), std() # other common functions
argmax(), argmin() # returns index of max and min vals respectively

when copying arrays, use np.copy() to avoid affecting the original array
enumerate(matrix) # iterates over a matrix row by row
zip(mat1, mat2, mat3) # iterates over mutliple matrices of same dim

npa = np.arange(27) # creates a one dimensional array with numbers from 0 - 26
np.arange(start,stop,step)
npa.reshape(3,9) # converts it into a 2 dimensional array (matrix) with 3 rows and 9 cols

#convert list to numpy array
np.asarray(list)

# functions to generate np arrays
np.zeros(10) # generates a vector of 10 zeros
np.zeros((5,5)) # generates a 5x5 matrix of zeros
np.eye(4) # creates a 4x4 identity matrix
np.full(10,5) # creates an array of length 10, all values being 5

np.random.rand(5) # generates 5 random numbers from a uniform distribution of numbers between 0 & 1.
np.random.randn(5) # # generates 5 random numbers from a normal distribution centered around 0.
np.random.randint(1,100,10) # generates 10 random integres between 1 and 100, 1 included by 100 not

# functions to operate on arrays
# Note: arrays in python refer to ndarrays, regular python arrays are called lists
ndarray.max() # gives max value of given ndarray
ndarray.argmax() # gives the position of the max value

# attributes of arrays, no () after since they are properties, not functions
ndarray.shape
ndarray.dtype

#to slice/subset an np array
# if a one dimensional array, get value at a certain index by
array[x]
# get a sequence of values
array[x:y]
# for multidimenational arrays, first arg is for rows, second for columns - leave either of them empty and you get all rows or columns. This is called array slicing
array[from_row:to_row, from_col:to_col]
array[row,col] # gets you a single value, same as array[row][col]
# if you want to get a row from a 2-dimensional array
array[0,:] # means first row (all columns), same as array[0][:]
array[:,1] # second column (all rows)
# for higher dimensional arrays, indexing like above will return smaller arrays. For eg. is x is a 2x2x3 array (2 rows, 2 columns and 3 elements in each element of the 2x2 array)
x[0] # will be a 2x3 array

# slices are views on original array, so if you change values in a slice, the values in the original array will change
slice = array[5:8]
slice[0] = x # now array[5] is also x
# to create a slice that is not a view you have to copy the array
slice = array[5:8].copy()
# to get individual values
array[rownum, colnum]
#to iterate through an np array
for i in nparray:
    print(i)
#to iterate column-wise, transpose array
for i in nparray.T:
#to get a flat list of elements
for i in nparray.flat:

# Boolean indexing is when a boolean array is used to slice an array. This can be used if 2 arrays are related to each other - boolean indexing can then be used to pull out values from the second array that correspond to the first array. Construct a boolean array from the first array.
names = np.array(['Bob','Joe','Will','Bob','Will','Joe','Joe'])
names == 'Bob' # will give
array([ True, False, False,  True, False, False, False], dtype=bool)
# this boolean array can be used to slice another array, say 'data'
data[names == 'Bob'] # will give values of data where the index array is True
data[-(names == 'Bob')] # will give values where index array is False
# Selecting data using boolean indexing always creates a copy of the data
# boolean indexing can be used to set values as well
data[data<0] = 0 # will set all the negative values in 'data' to 0
data[names != Bob] = 7 # sets whatever values that are true in the index array to 7

# Fancy indexing is indexing using integer arrays. For eg. if a is an (8,4) array a[[4,3,2]] will return the respective rows (4th, 3rd and 2nd)
a[[-3,-5,-7]] # will select rows from the end.
# note the double brackets, otherwise it will return the corresponding element
a[5,4] # returns the element in the 5th row, 4th column
a[[5,4]] # returns rows 5 & 4
# Passing multiple index arrays selects the corresponding elements
a[[1,2,3][0,2,3]} # will return a 1D array with elements [1,0], [2,2] and [3,3]
# To return a multidimension array with the second integer array being columns for each row in the first
a[[1,2,3]][:[0,2,3]] # returns for each row, elements in columns 0,2 & 3
# even cleaner way using np.ix_
a[np.ix_([1,2,3][0,2,3])]
# Fancy indexing always copies into a new array, unlike slicing which creates views into the existing array

# Transpose an np array
a.transpose
a.T
# Multiplying two matrices (assuming conditions for matrix multiplication are satisfied)
np.dot(a,b)
# Mutlidimensional array
a=np.arange(16).reshape((2,2,4)) # means the array will have 2 rows and each row will be a 2x4 array
a.swapaxes(1,2) # will swap axes 1 and 2

# Universal functions or ufuncs perform element-wise operations on an array without looping
eg. sqrt, exp - unary ufuncs since they require only one array
# binary ufuncs takes 2 arrays and return a single array
np.maximum(a,b) # will return element-wise maximum comparing a and b
# some binary ufuncs return multiple arrays
np.modf(a) # returns the integral and fractional parts of array a


#to stack multiple arrays
np.hstack((arr1,arr2)) # note that hstack (horizontal) takes a single argument which is a tuple of the arrays to stack
#to stack vertical (one on top of the other)
np.vstack
#to split array
np.hsplit(nparray, x) # where is the number of arrays to split into
np.vsplit(nparray, x)

#read an image in as a numpy array
import cv2
img = cv2.imread('image.jpg')
# img is now an np array with each number being the value of a pixel.
# color scale is 0-black 255-white and everything between them are diff shades of gray. 
# 3 dimensional array if reading in RGB with each dimension representing one of R,G and B. The actual color at a particular pixel is a composite of the 3 values.
#write an image
cv2.imwrite('newfile', <np array>)


