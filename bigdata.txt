When data is around 8GB or less, it can be processed in your local computer's RAM. But when the data gets larger than can be processed in your RAM or stored in your hard disk, a 'distributed system' comes in. It means distributing your data into multiple computers/nodes. You have a head node controlling a distribution of multiple machines. This means you can add multiple cores to your processing system. After a certain point it is much easier to 'scale out' to many low CPU machines than 'scale up' to single computer with higher CPU.

A key feature of a distributed system is fault tolerance. If one or more nodes in the system fail, the network can still work fine with the working nodes. The data is duplicated across multiple nodes to prevent data loss should a node go down.

Hadoop is an architecture to distribute very large files and datasets across multiple machines. It uses HDFS (Hadoop Distributed File System) for this. It duplicates small blocks of data for fault tolerance and faster processing. It has a main 'name' node which controls multiple 'data' nodes. It uses blocks of data usually 128MB and distributes across nodes. Each block is replcated 3 times for fault tolerance. Smaller blocks provide more parallelization during processing.

MapReduce is the programming model that does the computations on Hadoop. It splits a computation task to a distributed set of files such as HDFS. It has a job tracker that sits in the name node and task trackers that sit on the data/worker nodes. The job tracker sends the code to run on the nodes and the task trackers allocate memory and CPU to the jobs.

Spark is a technology that enables computation and has many advantages over plain MapReduce. Open source project on Apache, created at UC Berkeley in 2013 and exploded in popularity. Spark can use data stored in a variety of data formats besides HDFS - Cassandra, AWS S3 etc. MapReduce requires data in HDFS format. Spark can process data 100x faster than MR because it keeps most of its data in memory whereas MR has to write to disk after each M & R operation.

At the core of spark is the idea of a Resilient Distributed Dataset (RDD). The 4 features of RDD are:
1) Distributed
2) Fault tolerant
3) Partitioned for parallel operation
4) Ability to use many data sources

A driver program called SparkContext communicates with a Cluster Manager which in turn communicates with worker nodes that execute tasks. 
a) The RDD objects are transformed using SQL like operations and creates Directed Acyclic Graph (DAG) objects which then goes to a b) DAG scheduler, which splits the graph into tasks which in turn goes to a
c) Task scheduler that launches the tasks on
d) Worker nodes which execute the tasks

The data in the DAGs are shareable meaning different operations can act on the same data.

Most development work happens with the RDD objects, the rest occur under the hood. RDD objects are immutable, lazily eavluated and cacheable. Two types of RDD operations:
1) Actions
2) Transformations

A Spark job is a sequence of transformations with a final action.

Basic Actions:
1) Collect - like SQL Select, returns all elements of an RDD as an array
2) Count - returns the count of elements in an RDD
3) First - first element in an RDD
4) Take - return first n elements as an array

Basic Transformations:
1) Filter - filters elements by a function and returns those elements that are true.
2) Map - runs a function on each element, preserves the number of elements. Similar to pandas.apply(). eg. return the first letter of a list of names.
3) Flatmap - transforms each element into 0-N elements, changes the number of elements in most cases. eg. transform a corpus of text into a list of words, each element is a line of text but after transformation each element is a single word.

Often RDDs hold their elements as key-value tuple pairs (called paired RDD). This offers better partitioning of data.
Reduce - aggregate RDD elements by a function that returns a single element.
ReduceByKey - aggregate and return a pair RDD 

Both Reduce and ReduceByKey are similar to a Groupby operation.

Spark and Python:
To setup install Java, Scala (java-based), Hadoop and Spark on a server (EC2 on aws would work fine since it actually distributes the computing).

The first step is to create a spark context that lets the user interact with a cluster

from pyspark import SparkContext # SparkContext is what connects you to a Spark cluster.
sc = SparkContext()

Create an RDD
There are two ways to create RDDs: a) parallelizing an existing collection in your driver program, or b) referencing a dataset in an external storage system, such as a shared filesystem, HDFS, HBase, or any data source offering a Hadoop InputFormat.

a)
a = [1,2,3,4]
rdd = sc.parallelize(a)

b)
file = sc.textFile('<path to a text file>') # create an RDD object called file, reading in a text file
file.count() # counts the number of lines in file
file.first() # returns the first line
file.filter(lambda line: 'second' in line) # filters for the occurence of the word 'second' in the file, returns an RDD object on which you have to say 'collect()' to see the content.

file.map(lambda line: line.split()) # transformation to split each line into words, but keep the structure ie same number of lines as in the original file
file.flatMap(lambda line: line.split()) # transformation to split each line into words, but also flatten it to make it into a sequence of individual words

# get rid of a beginning hash in a line
file.map(lambda x: x[1:] if x[0]=='#' else x).collect()
# chaining map functions to get rid of the beginning hash and split the lines
file.map(lambda x: x[1:] if x[0]=='#' else x).map(lambda x: x.split()).collect()

# gather specific fields from a file as tuples
file.map(lambda lst: (lst[3],lst[-1])).collect() # grabbing the 4th and last fields as a tuple
# the second aspect of mapreduce - reduce - acts on tuples of values. For eg. to summarize by one column the values of another (like groupby() in pandas):
cleanServ.map(lambda lst: (lst[3],lst[-1])).reduceByKey(lambda amt1,amt2 : amt1+amt2).collect()
# reduceByKey assumes that the first value of the tuple is the key. In the above case it is basically summing up the values of lst[-1] by lst[3], which it takes as the key

----------------------------------------------
From DataCamp Spark course

Spark is a platform for cluster computing. Spark lets you spread data and computations over clusters with multiple nodes (think of each node as a separate computer). Splitting up your data makes it easier to work with very large datasets because each node only works with a small amount of data.

As each node works on its own subset of the total data, it also carries out a part of the total calculations required, so that both data processing and computation are performed in parallel over the nodes in the cluster. It is a fact that parallel computation can make certain types of programming tasks much faster.

Deciding whether or not Spark is the best solution for your problem takes some experience, but you can consider questions like:

Is my data too big to work with on a single machine? Can my calculations be easily parallelized?

Using Spark in Python
The first step in using Spark is connecting to a cluster.

In practice, the cluster will be hosted on a remote machine that's connected to all other nodes. There will be one computer, called the master that manages splitting up the data and the computations. The master is connected to the rest of the computers in the cluster, which are called slaves. The master sends the slaves data and calculations to run, and they send their results back to the master.

When you're just getting started with Spark it's simpler to just run a cluster locally. Thus, for this course, instead of connecting to another computer, all computations will be run on DataCamp's servers in a simulated cluster.

Creating the connection is as simple as creating an instance of the SparkContext class. The class constructor takes a few optional arguments that allow you to specify the attributes of the cluster you're connecting to.

An object holding all these attributes can be created with the SparkConf() constructor. 

Using DataFrames
Spark's core data structure is the Resilient Distributed Dataset (RDD). This is a low level object that lets Spark work its magic by splitting data across multiple nodes in the cluster. However, RDDs are hard to work with directly, so in this course you'll be using the Spark DataFrame abstraction built on top of RDDs.

The Spark DataFrame was designed to behave a lot like a SQL table (a table with variables in the columns and observations in the rows). Not only are they easier to understand, DataFrames are also more optimized for complicated operations than RDDs.

When you start modifying and combining columns and rows of data, there are many ways to arrive at the same result, but some often take much longer than others. When using RDDs, it's up to the data scientist to figure out the right way to optimize the query, but the DataFrame implementation has much of this optimization built in!

To start working with Spark DataFrames, you first have to create a SparkSession object from your SparkContext. You can think of the SparkContext as your connection to the cluster and the SparkSession as your interface with that connection.

Creating multiple SparkSessions and SparkContexts can cause issues, so it's best practice to use the SparkSession.builder.getOrCreate() method. This returns an existing SparkSession if there's already one in the environment, or creates a new one if necessary!

# Import SparkSession from pyspark.sql
from pyspark.sql import SparkSession

# Create my_spark
spark = SparkSession.builder.getOrCreate()

# Print my_spark
print(spark)

Viewing tables
Once you've created a SparkSession, you can start poking around to see what data is in your cluster. Your SparkSession has an attribute called catalog which lists all the data inside the cluster. This attribute has a few methods for extracting different pieces of information. One of the most useful is the .listTables() method, which returns the names of all the tables in your cluster as a list.

# Print the tables in the catalog
print(spark.catalog.listTables())

One of the advantages of the DataFrame interface is that you can run SQL queries on the tables in your Spark cluster. 

Running a query on a table returned from listTables() above is as easy as using the .sql() method on your SparkSession. This method takes a string containing the query and returns a DataFrame with the results!

# to see first 10 rows of the table
query = "FROM <table> SELECT * LIMIT 10"
result = spark.sql(query)
result.show() # shows as a sql table

Pandafy a Spark DataFrame
Sometimes it makes sense to then take that result table and work with it locally using a tool like pandas. Spark DataFrames make that easy with the .toPandas() method. Calling this method on a Spark DataFrame returns the corresponding pandas DataFrame.

df = result.toPandas()

To put a pandas DataFrame into a Spark cluster, The SparkSession class has a method called createDataFrame() that takes a pandas DataFrame and returns a Spark DataFrame. The output of this method is stored locally, not in the SparkSession catalog. This means that you can use all the Spark DataFrame methods on it, but you can't access the data in other contexts. For example, a SQL query (using the .sql() method) that references your DataFrame will throw an error. 

To access the data as a table, you have to save it as a temporary table using the .createTempView() Spark DataFrame method, which takes as its only argument the name of the temporary table you'd like to register. This method registers the DataFrame as a table in the catalog, but as this table is temporary, it can only be accessed from the specific SparkSession used to create the Spark DataFrame.

There is also the method .createOrReplaceTempView(). This safely creates a new temporary table if nothing was there before, or updates an existing table if one was already defined. You'll use this method to avoid running into problems with duplicate tables.

# Create pd_temp
pd_temp = pd.DataFrame(np.random.random(10))

# Create spark_temp from pd_temp
spark_temp = spark.createDataFrame(pd_temp)

# Examine the tables in the catalog
print(spark.catalog.listTables())

# Add spark_temp to the catalog
spark_temp.createOrReplaceTempView('temp')

# Examine the tables in the catalog again
print(spark.catalog.listTables())

SparkSession has a .read attribute which has several methods for reading different data sources into Spark DataFrames. Using these you can create a DataFrame from a .csv file just like with regular pandas DataFrames

# path to file
file_path = "/usr/local/share/datasets/test.csv"

# Read in the airports data
airports = spark.read.csv(file_path)

# Show the data
airports.show()
----------------------------------------------
# Read/write parquet files
# Write/create a parquet file from a pandas data
import pyarrow as pa
import pyarrow.parquet as pq
table = pa.Table.from_pandas(df)
pq.write_table(table, 'example.parquet')
# Read parquet
table = pq.read_table('example.parquet')
df = table.to_pandas()
----------------------------------------------
#The first operation is to get the sparkcontext which is what connects your code to all things spark
import pyspark
sc = pyspark.SparkContext(master='local[4]') # means run spark locally with 4 workers

You can only have one spark context per user since spark is a user-based system. A single user can use one context to communicate with their cluster.

sc.stop() # stops the current context

# next step is to create an RDD
a = sc.parallelize(range(3)) # now a is an rdd. 

# access contents of an RDD - contents cannot be accessed directly, only through actions or transformations
# collect contents of an RDD - gather from all nodes and bring to head node
a.collect() # returns a list [0,1,2], opposite of parallelize that distributes the list
# collect eliminates parallelism, hence should be done with care and as much as possible as the last step

# map as usual runs a function on each element, in spark it is run in parallel
a.map(lambda x: x**2).collect() # square all the elements in a and collect back the list of squares
a.reduce(lambda x,y: x+y).collect() # reduce calculates sum of all numbers

# reduce returns a single element from a list
a.reduce(lambda x,y: x+y) # sums up the elements of a list and returns the sum

reduce should not do operations based on order (like minus).
While using lambdas is convenient, any regular python function can be used for Map and reduce operation
----------------------------------------------
sudo hostname -s 127.0.0.1
----------------------------------------------
Sparkcontext can be initiated with a certain number of workers/worker nodes

sc = pyspark.SparkContext(master='local[4]') # spawns 4 workers

The number of workers is ideally equal to the number of cores available. Increasing the workers beyond that will not result in much improvement in performance since multiple workers will be competing for the same core and basically just switch context between them. This can be checked by repeating the same operation looping through a range (say 1-10) and checking the times of execution. For a 4-core machine, the time plateaus around 4 workers.

Spark uses lazy evaluation (compute only when needed, otherwise generate an execution plan) to save space and time. If an RDD is needed for many computations, it can be cached to speed up the computations.

RDD.map(<some function>).cache() # caches the result of running <some function>

RDDs by default contains the same number of partitions as the number of workers it was initiated with. But that can be changed.

You should have at least the same number of partitions as workers. At times more (smaller) partitions than workers is beneficial.

rdd.repartition(n) # changes rdd to use n partitions
rdd.map(lambda x: (x,x)).partitionBy(n) # method partitionBy expects a key-value RDD, hence the lambda that returns (x,x) tuple.

When partitioned as above, one issue that arises is that another operation can render one or more of the partitions useless for further operations since they dont have any elements left after the previous operation. This happens because the keys and values are the same. To rectify this, the once operated on RDDs can be repartitioned with keys can be altered to be different. For eg. the key can be value/# of partitions.

rdd.map(lambda x: (x[1]/n,x)).partitionBy(n)

Another option is to use 'repartition(n)' which will randomnly distribute the RDD among n partitions. In this case there is no need for a key, but you have less control over partitioning.

rdd.repartition(n)

In general, spark does not allow workers to access specific elements in an RDD, whatever function needs to run on the whole RDD. This can be a limitation. One way around is to use the glom() function that splits a partition into a tuple of elements. While the values themselves are immutable, they can be accessed by index and properties like length can be calculated. 

rdd.glom().map(len).collect() # 

Chaining:
# A sequential operation to find the sum of squares of a list
rdd = sc.parallelize([1,2,3,4])
sq = rdd.map(lambda x: x*x)
sum = sq.reduce(lambda x,y: x+y)

# chaining operation to do the same
sum = rdd.map(lambda x: x*x).reduce(lambda x,y: x+y)

chaining avoids the need to create intermediate rdds thereby saving memory and time. It is a model of lazy evaluation.

Basic operations on RDDs

rdd.count() # number of elements in the RDD
rdd.first() # fetch the first element
rdd.take(n) # fetch the first n elements

# Sampling an RDD - since RDDs are usually very large, it is common to take a sample from it
rdd.sample(<with replacement boolean>, <fraction>).collect() # first flag says if it should sample with replacement or not and the second says what fraction of the total to sample

# filter an RDD
rdd.filter(lambda x: x > 5).collect() # returns all elements > 5

# distinct - get rid of duplicates
rdd.distinct().collect()

# flatmap - acts on elements of a lists of lists and returns a flat list. For eg. given a list of sentences, returns individual words as a single list
rdd.flatmap(lambda x: x.split(" ")).collect()

# Set operations - acting on multiple RDDs to find unions, intersections, complements etc
rdd1.union(rdd2).collect() # get a union of the 2 rdds
rdd1.union(rdd2).distinct().collect() # get a merged distinct list of elements from the 2 rdds

rdd1.intersection(rdd2).collect() # fetch elements in common
rdd1.subtract(rdd2).collect() # fetch elements in rdd1 not present in rdd2
rdd1.cartesian(rdd2).collect() # give all combinations of elements in the 2 rdds, as tuples