2 basic pandas data structures: Series and DataFrames
Series: one dimensional array. Like lists, except they have an associated array of data labels instead of just index locations.
a = pd.Series([1,2,3,4]) # converts a list to a series
b = pd.Series([1,2,3,4], index=['a','b','c','d']) # creates the same series, but now with custom index labels
a.values # prints the values of the Series
b.index # prints the indexes
b[['c','a','d']] # returns correponding values
Numpy operations like filtering with boolean array, scalar multiplication, math functions etc. apply to Series as well.
Dicts can be converted to Series as:
Series(<dict variable>) # where dict var is {'key1': 'val1', 'key2':'val2' etc}
Series with the same indexes can be aligned (values summed)

a.isnull() will show as True any keys that have no value
###################################
DataFrame: Tabular, spreadsheet like data structure containing an ordered collection of columns each of which can be a different value type (numeric, string, bool etc)

A Series' index can be altered in place by assignment to object.index eg. a.index = ['w', 'x', 'y', 'z'] 

#pandas methods to read files:
read_csv('filename') # optional sep parameter if separator is not comma
read_json('filename')
read_excel('filename', sheetname=0) # to read the first sheet in case there are multiple sheets

#An url can also be passed as argument to the above functions

#To index with a specific column
df.set_index('colname') 
# above does not change the dataframe, just spits out a modified df. To actually change the df:
df = df.set_index('colname') #or
df.set_index('colname', inplace=TRUE)

#Access data based on labels (row/column names)
# To slice a chunk (some number of rows for a certain set of columns)
df.loc[fromrowid:torowid, fromcolumn:tocolumn]
# if you leave out the range, you can also access single cells from the df
df.loc['rowid', 'colname']
# to get all rows for a select set of columns, use a single colon for rows
df.loc[:, 'fromcolumn':'tocolumn']

#Access data based on indexes/positions
# same logic as above, but use function iloc and index numbers
df.iloc[1:4, 3:5] # fetches rows 1,2 and 3 of column numbers 3&4

#For access with a mix of labels and positions, use ix
df.ix[1:4, 'fromcolumn':'tocolumn']

#To delete a row or column from data frame
df.drop('colname', 1) # 1 means column 
df.drop('rowname', 0) # 0 means row
#To delete by index instead of names/labels
df.drop(df.index[from:to, 0] # change to 1 for columns

#To add a column to a data frame
df['newcolumn'] = "value" # value will be propagated through all the rows of the data frame 
#To add a new row, transpose the df, add a column and then transpose back

#To apply a function to all rows of a column without looping
df['column'].apply(functionname)
#function can also be a lambda
df['newcolumn'] = df['oldcolumn'].apply(lambda x: <do something with x>)



