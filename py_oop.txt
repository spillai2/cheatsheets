Basic OOP
#Class definition
class Person (object): # 'object' passed as the parameter means there is no inheritance, it is its own class
    department = 'School of Information' #a class variable

    def __init__(self, name, location): # constructor that initializes a Person object
	self.name = name
	self.location = location
    def set_name(self, new_name): #a method
        self.name = new_name
    def set_location(self, new_location):
        self.location = new_location
        
#Object instantiation and use:
person = Person('Sanjeev', 'Bedford')
person.set_name('Sanjeev Pillai')
person.set_location('Bedford, MA')
print('{} live in {} and works in the department {}'.format(person.name, person.location, person.department))

'self' refers to the object itself. For eg. person.setname('name') is the same as Person.setname(person, 'name'). Here the instance person is passed to the class's setname method. Means the method acts on the object (self) that is passed to it.

Instance methods need a 'self' because they require an existing instance of a class to be used. 

Class attributes are general to all objects created from a class. For eg.

class Car(object):
	num_wheels = 4

	def __init__(...)

Here all car objects created will have num_wheels set to 4 and can be accessed through self, ie. self.num_wheels

Static methods do not need a 'self', they are declared at class level. A 'decorator' @staticmethod is used to make it clear that it should not receive a self as first parameter

@staticmethod
def make_car_sound():
	print('Vrooom!')

All cars can make the same sound.

Adding an __str__ method in the class overrides the object's default str method when print(obj) is called and can give whatever details of the object the user wants to.

def __str__(self):
    return "The object has a attribute x that has the value {} and an attribute y that is {}".format(self.x, self.y 

Class methods are variants of static methods. Instead of no parameter or self/object parameter, this method receives a 'cls' parameter, meaning the class itself. Decoarated with @classmethod.

Inheritance
Child classes inheriting from a parent class will help define a lot of the abstractions in the parent class itself with the child classes containing only what is different from the parent (or in addition to the parent). For eg. a Car parent class can have child classes like 'compact', 'midsize' and 'fullsize' cars.

Often a concept (not a real world object) is a parent class. For eg. 'Vehicle' is a concept class for real world object like cars, trucks etc.

When a child class inherits from a parent class, its definition will have the parent class as the parameter (instead of 'object' which means no inheritance).

class Car(Vehicle):

Abstract classes: The parent concept class should not be instantiated since it is not a real world object. It should instead be an 'Abstract Base Class' (ABC) - classes that can only be inherited from. This can be achieved by setting that class's metaclass to ABCMeta and making one of its methods virtual (meaning it is an abstractmethod that doesn't do anything in the ABC, but the child classes can override it with a method that does something. Abstraction is key to inheritance.

class Vehicle(object):
	__metaclass__= ABCMeta
	
	sale_price=0
	num_wheels=0
	<a set of methods including __init__>

	@abstractmethod
	def vehicle_type():
		pass

And then

class Motorcycle(Vehicle):
	sale_price=4000
	num_wheels=2

	def vehicle_type():
		return 'motorcycle'