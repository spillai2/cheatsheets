Data structuresVectorsCreate a vector> x = c(1,2,3,4)Create a sequence vector eg. A sequence from 1 to 10 in increments of 2> x = seq(1,10,2)Create a vector with a range. eg. The range of numbers from 1 to 10> x = 1:10To repeat same value(s), multiple times> x = rep(0,100)repeats 0, 100 timesMatricesCreate a matrix> m = matrix(<data vector>,nrow=x,ncol=y)default filling is by column, add byrow=T if needed.eg. to create a 3 row matrix with numbers from 1-12 and have it filled by row> matrix(1:12,nrow=3,byrow=T) To turn a vector into a matrix> dim(<data vector>) = c(<nrows>,<ncols>)To give names to rows and cols> rownames(<matrix>) = <data vector with names>eg. to label the rows with the first 5 letters of the alphabet, uppercase> rownames(m) = LETTERS[1:5]'colnames' for column names.To transpose a matrix ie switch rows and cols Ð make a 3x4 matrix a 4x3 matrix> t(<matrix>)To create columns or rows of values, instead of converting an existing vector into a matrix> cbind(vector1,vector2,vector3)creates a 3 column matrix with the contents of each vector. Vectors should be of same length as that will be the number of rows in the matrix.eg. To create a 4x3 matrix with columns labeled A,B,C> cbind(A=1:4,B=5:8,C=9:12)rbind - analogous row functionFactors Ð for categorical variables> x = c(1,2,3,4)Grade the values of the vector x> facx = factor(x,1:4)Assign values to the grade> levels(facx) = c('none','mild','medium','high')---------------------------------ListsCombination of different data types into a single object.eg.> m = matrix(1,nrow=3,ncol=3)> x = c(1,2,3,4)> y = c('mild', 'medium', 'severe')These 3 different data structures can be combined into a single list> l = list(x,y,m)---------------------------------Data FramesCollection of vectors of equal length, related to each other Ð like a spreadsheet.eg. genome sizes and gene counts from different organisms> org = c('Human', 'Mouse', 'Fly', 'Worm', 'Yeast')> gsize = c(3000000000, 3000000000,135600000,97000000,12100000)> gcount = c(30000,300000,13061,19099,6034)A data frame can be created from the above vectors to hold all the related data> genomes = data.frame(Organism=org, Genomesize=gsize, Genecount=gcount)---------------------------------Operations on data structuresVectorsAccessing elements of a vectorvector[index] or vector[range], index starts at 1eg. > x[2] > x[3:7]Sorting> sort(y) does a numerical sort.> order(y) shows what indexes hold the sorted elements.Extracting elementsregular> x[c(2,3)]  extracts the 2nd and 3rd elements of x.logical> x[x > 50]  extracts all values of x that are > 50.> length(x) gives the length of vector x.
Data FramesUse the $ notation to access specific vectors within a data frame, rest are just as in vectorseg. > genomes$Genomesize will give the gsize vector within the genomes data frame.> genomes$Genomesize[2] will give the 2nd element of the vector.To add a row or a column to a data frame, use the rbind and cbind functions.eg. > cbind(genomes, percent_gc) adds the column with % GC content.> rbind(genomes, maize) adds maize to the list of organisms.Checking/Changing data typesChecking for data structure> is.vector(x) checks if x is a vector, returns TRUE or FALSE> is.data.frame(x)Checking data type> is.character(x)> is.numeric(x)Changing data structure/type> as.matrix(x) converts vector x into a single column matrix  > as.character(x) changes vector x to characters ie ,1 2 3 4 becomes Ò1Ó, Ò2Ó, Ò3Ó, Ò4ÓMissing DataR assigns an NA status to elements that are missing data. Carried through in calculations.> is.na(x[4]) checks if the 4th element of vector x is a missing value.---------------------------------Controlling the workspaceListing objects> ls()search() shows what packages are currently loaded in the workspace.Deleting objects> rm(<list of comma separated objects>) deletes the objectsEditing objects> data.entry(<object>) opens up a spreadsheet with all the data in the object that can then be edited.Saving objects> savehistory(file=Ó<path to file>Ó) saves all the commands ran in the current session, without the 'file' option its saved to a .Rhistory file in the working directory.> save.image()saves the entire workspace including objects created and the output generated in a .RData file. Its not  readable, but the saved workspace can be loaded back with> load(Ò.RDataÓ)---------------------------------Importing files> data(<file>) will bring in the built in data file that is part of a loaded package. No extension needed.> dt = read.table(<path to file>, header=T)will import data from an external text file into a data frame dt using the first line as a headerInteracting with RDBMS (MySQL)Requires the RMySQL packagelibrary(RMySQL)con = dbConnect(MySQL(), user="<user>", password="<pass>", dbname="<db>")results = dbGetQuery(con,"<sql query>")fetches the results into a data frame called results.---------------------------------Basic Graphics> plot(var1, var2, pch=<number>, main=ÓMain titleÓ, sub=ÓsubtitleÓ, xlab=Óx-labelÓ, ylab=Óy-labelÓ)plots variables var1 on x-axis, var2 on y-axis, using the plotting symbol given by pch (default circle) and giving labels as defined.> barplot(var1, names.arg=var2, las=2) draws a barchart of var2 (x axis) with var1 (y axis) values. Las=2 forces vertical legends for x axis value, which is good especially if they are strings.hist(x) draws a histogram of the variable xAdding/superimposing to an existing graph> lines(x,y) will add x,y values approximated by a straight line to the exiting plot.> text(x,y,Ó<text to be displayed>Ó) adds text at x,y> abline(h=x,v=y) draws a horizontal line at x on x axis and vertical at y on y axis > curve(dnorm(x))adds a curve to show the distribution of the variable x---------------------------------ProgrammingBy writing functions or batch files that can be run non-interactively.Flow Control Conditionals Ð while, if and for> while (<condition>) <code to do something>> if (<condition>) <code to do something> else <code to do something>vectorized version for passing multiple values, use in functions etc. is 'ifelse'> ifelse(x <= 1, x^2 , x^3)if x<=1, it will do x^2 else, it will do x^3> for (i in 1:4) cat(x[i], "\n")---------------------------------Functions> f = function (x) { ifelse(x <= 1, x^2 , x^3) }rep(2,5) # creates a vector that has 2 repeated 5 times
rep(c('blue', 'red'), c(2,3)) creates vector with 2 'blue's and 2 'red's
sample(vector, num) # picks from a vector num times. For eg.
beads = rep(c('blue', 'red'), c(2,3))
sample(beads,1) # will pick a random bead blue or red from the beads

replicate(10000, sample(beads,1)) # replicate the single bead selection 10000 times, Monte Carlo simulation - computationally simulate an experiment, n number of times
sample(beads, 10000, replace=TRUE) # alternatively sample with replacement, same as using replicate

table(vector) # will tabulate according the number of times values are repeated
prop.table(table(vector)) # takes the output of table and calculates proportions for each value

paste(str1, str2) # will concatenate the two strings with a space (default) in between unless a 'sep' is provided
paste(vec1, vec2) # will give concatenations of corresponding elements of both vectorsexpand.grid(vec1, vec2) # will give all possible combinations of the two vectors

# Create a deck of cards using paste and expand.grid
suits = c('Hearts','Diamonds','Clubs','Spades')numbers = c('Ace','Deuce','Three','Four','Five','Six','Seven','Eight','Nine','Ten','Jack','Queen','King')
deck = expand.grid(number = numbers, suit = suits)deck = paste(deck$number,deck$suit)
# Probability of a king in first draw
kings = paste('King',suits)
mean(deck %in% kings)

Permunations and Combinations
library(gtools)
permutations(n,r) # all different ways to select r items from a set of n, order matters
permuations(5,2) # all different ways in which to choose 2 numbers from a list of 5 without replacement (default)
permuations(5,2, repeats=TRUE) # all different ways in which to choose 2 numbers from a list of 5 with replacement
# number of ways to pick two cards from a deck
permutations(52,2,v=deck) # pick 2 from 52, source being the deck vector
# find probabilty that both are kings
first_card = hands[,1] # grab the first card
second_card = hands[,2] # grab the second card
sum(first_card %in% kings) # how many cases have a king in the first card
sum(first_card %in% kings & second_card %in% kings)/sum(first_card %in% kings) # what % of those cards have king in second

combinations(n,r) # order doesn't matter
# getting and ace and a facecard in blackjack, where the order doesn't matter
aces = paste('Ace', suits) # collect all possible Aces in a vector
facecard = c('King', 'Queen', 'Jack', 'Ten')
facecard = expand.grid(number=facecard, suit=suits) # all possible facecardsfacecard = paste(facecard$number, facecard$suit)hands = combinations(52,2, v=deck)mean(hands[,1] %in% aces & hands[,2] %in% facecard)Probability distributions and associated functionsDensity function is d<distribution>Distribution function (cumulative probability) is p<distribution>Binomial distribution> dbinom(k,n,p)gives the probability of getting k successes from n trials, given p (probability of success)> pbinom(k,n,p)