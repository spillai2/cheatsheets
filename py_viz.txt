MATPLOTLIB
Designed to have the same feel of Matlab's graphical plotting 
import matplotlib.pyplot as plt

# Functional way of calling matplotlib functions
plt.plot(x,y) # x and y are lists to display in x and y axis
plt.hist(x, bins=<#bins>) # x is a list of values

To actually display the plot after all customizations:
plt.show()

To avoid having to do plt.show() each time do:
%matplotlib inline

# labeling axes:
plt.xlabel('blah')
plt.ylabel('blah')
plt.title('blah')
plt.yticks([1,2,3,4],['a','b','c','d']) # defines y ticks and labels to shows (second list should match length of first)

plt.xscale('log') # converts x-axis to log scale

plt.scatter(x,y, s=<list with same length as x/y>, c = <list with colors>, alpha=0.8) # makes the scatter size based, s meaning size, c is for color and alpha for opacity value

plt.txt(<x coord>, <y coord>, 'text to display') # displays text in the plot
--------------------
# Multiple plots
To have more than one plot on a given canvas
plt.subplot(<num rows>,<num cols>,<plot #>) # the last argument is to specify where the given plot will go, eg.
plt.subplot(1,2,1) # create a plot with 1 row, 2 cols and put the following plot at column 1
plt.plot(x,y) # plot as usual
plt.subplot(1,2,2) # create a plot with 1 row, 2 cols and put the following plot at column 2
plt.plot(x,y)
--------------------
# Object oriented API
Create figure objects and call methods off of it
fig = plt.figure() # creates a figure object
axes = fig.add_axes([<list of 4 values for left, bottom, width and height of plot>) # all values in the list must be between 0 & 1
axes.plot(x,y)
axes.set_xlabel('blah')
axes.set_ylabel('blah')
axes.set_title('blah')

# Putting 2 sets of figure on one canvas
Can be done by defining 2 axes with different dimensions
axes1 = fig.add_axes([0.1,0.1,0.8,0.8])
axes2 = fig.add_axes([0.2,0.3,0.3,0.4])
Here axes1 that starts 10% from the left, 10% from the bottom and at 80% width and height will contain axes2 which is 20% from the left, 30% from the bottom, 30% width and 40% height

# Subplots
fig, axes = plt.subplot(nrows=1,ncols=2) # adds axes automatically based on # rows/cols needed, 'axes' here are matplotlib axes objects
Individual axes can then be plotted on and labeled like:
axes[0].plot(x,y)
To avoid overlap of subplots do at the end of the plot statements:
plt.tight_plot()
--------------------
# Control Fig size and DPI
fig = plt.figure(figsize=(3,2), dpi=100) # creates a figure 3" wide and 2" tall with a DPI of 100
Same can be done with subplots as well
fig, axes = plt.subplots(nrows=2,ncols=1,figsize=(3,2), dpi=100)

# To save a figure
fig.savefig(''myfig.png', dpi=100) # dpi is optional
Figs can be saved in various formats like png, jpeg etc.

# Adding legends
When you have multiple plots on the same canvas it helps to label which one is what
axes.plot(x,x**2, label='X Squared')
axes.plot(x, x**3, label='X Cubed')
axes.legend() # this will now add the above labels for each of the two plots
axes.legend(loc=0) # puts the legend at the best spot, 0 is code for best, there are several others that will let you position your legend.
--------------------
# Colors, line width
#To assign a specific color to your plot
axes.plot(x,y,color='blue') # color accepts common colors as string arguments. It also accepts RGB Hex values for more finer color control
#To control line width user argument linewidth (lw for short)
axes.plot(x,y,linewidth=2) # default is one, in this case it double the default
#Transparency can be controlled by parameter alpha
axes.plot(x,y,alpha=0.5) # default is 1, in this case it gives a bit more transparency
#Line style, like solid line or dotted line can be specified with parameter linestyle (ls for short)
axes.plot(x,y,ls='--) # will draw a dotted line, default is '-' which draws a solid line
#Markers lets you see where the exact data points are in your plot
axes.plot(x,y,marker='o',markersize=2) # puts an 'o' on the plot where your data points are, markersize is self-explanatory
#All parameters can be passed in a single call
axes.plot(x,y, color='blue',lw=2, alpha=0.5, ls='--', marker=0, markersize=2)

# Setting x and y limits
axes.set_xlim([low,high]) # will show/stretch the x axis between low and high values
axes.set_ylim([low,high])
--------------------
# Plot types (generally done better with Seaborn, but can also be done with Matplotlib)
Default plotting type is line graph, but many others are possible
plt.scatter(x,y)
plt.hist(data) # where data is usually a data frame or list
plt.boxplot(data)
#########################################
SEABORN
Statistical data visualization tool that works closely with pandas, built on top of matplotlib

import seaborn as sns
#To load a built-in dataset
tips = sns.load_dataset('tips')
# to explore the distribution of a single variable
sns.distplot(tips['one column'])
# optional args
sns.distplot(tips['one column'], kde=False, bins=30)
# to explore relationship between 2 variables
sns.jointplot(x='col1',y='col2',data=df) # plots the relationship as a scatterplot with histograms of individual vars appearing as sidebars along the x and y axis
sns.jointplot(x='col1',y='col2',data=df, marginal_kws={'hist_kws': {'edgecolor': "black"}}) # edgecolor demarcates the bars in the histogram
#optional arg 'kind' lets you determine what type of plot to show for relationship
sns.jointplot(x='col1',y='col2',data=df, kind='hex') # shows hexagons which also display freq of occurennce by darkness of color
# plot all possible numerical var pairs in a dataframe
sns.pairplot(df) # all vars along x axis and all vars along y axis, var vs samevar show hist along diagonal
# optional arg 'hue' will allow to pass a categorical variable in the same df, so plot appears colored to distinguish between the different categories in the cat variable. Also 'palette' will hlp you choose color 
sns.pairplot(df, hue='cat var', palette='coolwarm') # coolwarm is a predefined color palette in matplotlib
# 'rugplot' tallies the number of y-vals at each x-val superimposing the tally mark instead of shows a frequency as in a histogram
sns.rugplot(df['col']) # sort of shows the density of x-val
# kde plots - kernel density estimation - each rugplot tick is the center of a normal distribution, sum them all up and you get the kernel density curve
sns.kdeplot(df['col'])
--------------------
Categorical plotting
#Barplot - plot a categorical variable against a numeric
sns.barplot(x='cat col', y='num col', data=df) # bar plot showing average for each category. Default is mean/avg, but can be changed with the 'estimator' paremeter eg. estimator=std
# to count the cat variable
sns.countplot(x='cat col', data=df)
#Boxplot to see the distribution of different values of a categorical variable against a numerical variable
sns.boxplot(x='cat col', y='num col', data=df) # optional argument 'hue' will let you subdivide even further
#Violinplot to see kde of different values of a categorical variable against a numerical variable
sns.violinplot(x='cat col', y='num col', data=df) # optionally 'hue' and 'split=True' would split the plot among 2 categories in hue on either side
#Scatterplot to see a scatter plot of a num variable for different values of a cat variable
sns.stripplot(x='cat col', y='num col', data=df) # optional argument 'jitter=True' will add separation between the points using randomization
# combine a stripplot with a violinplot
sns.swarmplot(x='cat col', y='num col', data=df)
# violinplot and swarmplot can be combined into a single plot with the swarm points shown inside the violin borders
A general way to call all the above plots for categorical data is to call 'factorplot' and specify 'kind' eg. 'kind=bar' or 'kind=swarm'
--------------------
Matrix plotting
df.corr() # gives the correlation matrix between the various variables of a df
# main matrix plot function is heatmap
sns.heatmap(<matrix with corr>) # shows the correlation as a heatmap
sns.heatmap(<matrix with corr>, annot=True, cmap='coolwarm') # optional annot argument will show the correlation inside the cells, cmap is color map
# to convert a data set to a matrix, use pandas pivot_table()
df.pivot_table(index='col1', columns='col2', values='col3') # will create a matrix the rows of which are col1, columns are col2 and observations are col3. This can then be fed to heatmap()
# optional arguments linecolor and linewidth lets you set color and width of the lines separating the cells
# another type of matrix plot is clustermap - it uses hierarchical clustering to classify the variables, so heatmap will not be in the order of the rows/columns as in the data frame
--------------------
Grid plots
sns.PairGrid(df) # will create empty grids based on the number of numerical columns in the df
g = sns.PairGrid(df) # assign to variable
g.map_diag(sns.<something>)
g.map_upper(sns.<something>)
g.map_lower(sns.<something>)
# The above statements show how you can have finer grain control of what plots to display in the diagonal and upper/lower halves.
# FacetGrid allows you to grid just the cols you want
g = sns.FacetGrid(df, row='col1', col='col2') # gives an empty grid of 4
g.map(sns.distplot, 'col3') # gives a grid of 4, where the rows are distinct values of col1, cols are distinct values of col2 and the x axis is the values of col3
g.map(plt.scatter, 'col3', 'col4') # scatter needs 2 args so provide 2 columns
--------------------
Regression plots
sns.lmplot(x='col1', y='col2', data=df) # will plot the 2 variables and draw the regression line through them
# matplotlib parameters can be passed to a seaborn lmplot since seaborn calls matplotlib under the hood
sns.lmplot(x='col1', y='col2', data=df, hue='sex', markers=['o','v']) # here markers is a matplotlib parameter
sns.lmplot(x='col1', y='col2', data=df, col='sex') # creates 2 side-by-side plots split by sex (insted of together as in hue)
sns.lmplot(x='col1', y='col2', data=df, col='sex', aspect=0.6, size=0.8) # aspect changes the width/height ratio of the individual plots and size changes the size of the points
--------------------
Style and color
sns.set_style('darkgrid') # sets background to dark and shows grids. just dark will get rid of grids
plt.rcParams["patch.force_edgecolor"] = True # to turn on edge color on bars, off by default
#########################################
Pandas built-in data visualization
#Allows you to call visualization functions on a pandas data frame
df['col'].hist() # create a histogram of the distribution of values in col
# generic way to call
df['col'].plot(kind='hist')
or
df['col'].plot.hist()
df.plot.scatter(x='col1',y='col2')
df.plot.scatter(x='col1',y='col2', figsize=(12,2), s=4, c='red') # stretches out figure, changes size and color of dots
df.plot.scatter(x='col1',y='col2', figsize=(12,2), s=4, c='red', linewidth=1.2, edgecolor='black') # last 2 args defines borders of the bars
plt.style.use('ggplot') # setting this parameter makes the plots look better with ggplot kind of style
df.plot.box() # will create boxplots for all cols in data frame
df[['c1','c2']].plot.box() # will create boxplots for just those two columns
#########################################
Plotly and Cufflinks - for interactive visualization
# Plotly is an interactice visualization library and Cufflinks connects Plotly to Pandas
from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
import cufflinks as cf
# For Notebooks
init_notebook_mode(connected=True)
# For offline use
cf.go_offline() # Plotly as a company hosts your plotly apps, to work locally need to use go_offline()

df.iplot() # plots the values of the df interactively, shows values when mousing over, zoom in-out and a whole set of tools. default is line plots of all columns of the df
df.iplot(kind='scatter', x='c1', y='c2', mode='markers') # without markers plotly will try to connect all the points and give a messy looking figure.
# Most of the times the data frame will not be in the format in which we can easily call iplot on columns. In those cases, we can call aggregate functions on the df and pass the result to iplot
df.sum().iplot(kind='bar')
df.iplot(kind='box') # creates boxplots of all columns
# 3D plotting
df.iplot(kind='surface') # creates 3D plots of dataframes with 3 cols
df.iplot(kind='bubble', x='c1', y='c2', size='c3') # plot x1 on x, c2 on y and make the size of the bubbles correspond to values of c3
df.scatter_matrix() # similar to sns.pairplot (plots columns against each other)